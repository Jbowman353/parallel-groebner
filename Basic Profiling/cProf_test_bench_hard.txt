CProfile profiling results for 'test_benchmark_czichowski_f5b':

>>> cProfile.run('test_benchmark_czichowski_f5b()')
         498854 function calls (498818 primitive calls) in 0.194 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    21950    0.005    0.000    0.016    0.000 <frozen importlib._bootstrap>:1009(_handle_fromlist)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
      130    0.000    0.000    0.000    0.000 <string>:1(monomial_div)
      682    0.000    0.000    0.000    0.000 <string>:1(monomial_mul)
       20    0.000    0.000    0.000    0.000 <string>:1(monomial_pow)
        1    0.000    0.000    0.000    0.000 assumptions.py:215(__init__)
       24    0.000    0.000    0.000    0.000 basic.py:121(__hash__)
        1    0.000    0.000    0.000    0.000 basic.py:96(__new__)
        4    0.000    0.000    0.000    0.000 cache.py:92(wrapper)
        2    0.000    0.000    0.000    0.000 compatibility.py:247(iterable)
        2    0.000    0.000    0.000    0.000 compatibility.py:305(is_sequence)
       74    0.000    0.000    0.000    0.000 compatibility.py:357(as_int)
        1    0.000    0.000    0.000    0.000 contextlib.py:107(__enter__)
        1    0.000    0.000    0.000    0.000 contextlib.py:116(__exit__)
        1    0.000    0.000    0.000    0.000 contextlib.py:237(helper)
        1    0.000    0.000    0.000    0.000 contextlib.py:81(__init__)
      207    0.000    0.000    0.001    0.000 domain.py:104(convert)
      207    0.000    0.000    0.000    0.000 domain.py:158(of_type)
       10    0.000    0.000    0.000    0.000 domain.py:338(__eq__)
       12    0.000    0.000    0.000    0.000 domain.py:70(__hash__)
      207    0.000    0.000    0.000    0.000 domain.py:76(tp)
      102    0.000    0.000    0.000    0.000 domain.py:87(convert_from)
        1    0.000    0.000    0.000    0.000 facts.py:486(_tell)
        1    0.000    0.000    0.000    0.000 facts.py:503(deduce_all_facts)
     2816    0.001    0.000    0.016    0.000 field.py:28(quo)
        2    0.000    0.000    0.192    0.096 groebnertools.py:12(groebner)
    33882    0.003    0.000    0.003    0.000 groebnertools.py:284(Sign)
    21473    0.002    0.000    0.002    0.000 groebnertools.py:288(Polyn)
    25911    0.002    0.000    0.002    0.000 groebnertools.py:292(Num)
     2143    0.000    0.000    0.000    0.000 groebnertools.py:296(sig)
     8674    0.001    0.000    0.001    0.000 groebnertools.py:300(lbp)
     1187    0.001    0.000    0.001    0.000 groebnertools.py:306(sig_cmp)
     4628    0.002    0.000    0.002    0.000 groebnertools.py:327(sig_key)
     2139    0.001    0.000    0.004    0.000 groebnertools.py:339(sig_mult)
      172    0.000    0.000    0.022    0.000 groebnertools.py:351(lbp_sub)
     2021    0.003    0.000    0.046    0.000 groebnertools.py:368(lbp_mul_term)
      897    0.001    0.000    0.003    0.000 groebnertools.py:378(lbp_cmp)
     4628    0.004    0.000    0.007    0.000 groebnertools.py:399(lbp_key)
      897    0.005    0.000    0.061    0.000 groebnertools.py:408(critical_pair)
        2    0.000    0.000    0.001    0.000 groebnertools.py:43(<listcomp>)
     2314    0.004    0.000    0.012    0.000 groebnertools.py:479(cp_key)
        2    0.000    0.000    0.001    0.001 groebnertools.py:48(<listcomp>)
       55    0.000    0.000    0.017    0.000 groebnertools.py:486(s_poly)
     5625    0.007    0.000    0.015    0.000 groebnertools.py:495(is_rewritable_or_comparable)
       55    0.003    0.000    0.058    0.001 groebnertools.py:522(f5_reduce)
        2    0.005    0.002    0.188    0.094 groebnertools.py:573(_f5b)
        2    0.000    0.000    0.000    0.000 groebnertools.py:626(<listcomp>)
        4    0.000    0.000    0.000    0.000 groebnertools.py:627(<lambda>)
        2    0.000    0.000    0.000    0.000 groebnertools.py:630(<listcomp>)
        2    0.000    0.000    0.000    0.000 groebnertools.py:631(<lambda>)
     2312    0.001    0.000    0.012    0.000 groebnertools.py:676(<lambda>)
        2    0.000    0.000    0.001    0.000 groebnertools.py:695(<listcomp>)
        6    0.000    0.000    0.000    0.000 groebnertools.py:698(<lambda>)
        2    0.000    0.000    0.009    0.004 groebnertools.py:701(red_groebner)
        2    0.000    0.000    0.002    0.001 groebnertools.py:708(reduction)
        2    0.000    0.000    0.000    0.000 groebnertools.py:718(<listcomp>)
     1056    0.001    0.000    0.007    0.000 groebnertools.py:726(<genexpr>)
        2    0.000    0.000    0.000    0.000 integerring.py:25(get_field)
        5    0.000    0.000    0.000    0.000 logic.py:89(fuzzy_bool)
     2139    0.001    0.000    0.002    0.000 monomials.py:125(monomial_mul)
     2139    0.001    0.000    0.001    0.000 monomials.py:142(<listcomp>)
     1912    0.001    0.000    0.005    0.000 monomials.py:144(monomial_div)
     5736    0.001    0.000    0.001    0.000 monomials.py:168(<genexpr>)
     1912    0.001    0.000    0.002    0.000 monomials.py:173(monomial_ldiv)
     1912    0.001    0.000    0.001    0.000 monomials.py:195(<listcomp>)
      897    0.001    0.000    0.001    0.000 monomials.py:220(monomial_lcm)
      897    0.000    0.000    0.001    0.000 monomials.py:237(<listcomp>)
     8326    0.006    0.000    0.010    0.000 monomials.py:239(monomial_divides)
    19844    0.002    0.000    0.002    0.000 monomials.py:252(<genexpr>)
     1912    0.001    0.000    0.016    0.000 monomials.py:319(term_div)
        4    0.000    0.000    0.000    0.000 monomials.py:340(__init__)
       28    0.000    0.000    0.002    0.000 monomials.py:343(_build)
       56    0.000    0.000    0.000    0.000 monomials.py:348(_vars)
       56    0.000    0.000    0.000    0.000 monomials.py:349(<listcomp>)
        4    0.000    0.000    0.001    0.000 monomials.py:351(mul)
        4    0.000    0.000    0.000    0.000 monomials.py:361(<listcomp>)
        4    0.000    0.000    0.000    0.000 monomials.py:365(pow)
        4    0.000    0.000    0.000    0.000 monomials.py:373(<listcomp>)
        4    0.000    0.000    0.000    0.000 monomials.py:377(mulpow)
        4    0.000    0.000    0.000    0.000 monomials.py:387(<listcomp>)
        4    0.000    0.000    0.000    0.000 monomials.py:391(ldiv)
        4    0.000    0.000    0.000    0.000 monomials.py:401(<listcomp>)
        4    0.000    0.000    0.000    0.000 monomials.py:405(div)
        4    0.000    0.000    0.000    0.000 monomials.py:416(<listcomp>)
        4    0.000    0.000    0.000    0.000 monomials.py:421(lcm)
        4    0.000    0.000    0.000    0.000 monomials.py:431(<listcomp>)
        4    0.000    0.000    0.000    0.000 monomials.py:435(gcd)
        4    0.000    0.000    0.000    0.000 monomials.py:445(<listcomp>)
       37    0.000    0.000    0.000    0.000 numbers.py:159(igcd)
       37    0.000    0.000    0.000    0.000 numbers.py:179(<listcomp>)
       54    0.000    0.000    0.000    0.000 numbers.py:350(ilcm)
        4    0.000    0.000    0.000    0.000 orderings.py:199(monomial_key)
        2    0.000    0.000    0.000    0.000 orderings.py:26(__eq__)
       12    0.000    0.000    0.000    0.000 orderings.py:29(__hash__)
     5638    0.000    0.000    0.000    0.000 orderings.py:42(__call__)
    51820    0.007    0.000    0.013    0.000 orderings.py:51(__call__)
        2    0.000    0.000    0.000    0.000 polyconfig.py:28(using)
        2    0.000    0.000    0.000    0.000 polyconfig.py:38(setup)
        2    0.000    0.000    0.000    0.000 polyconfig.py:48(query)
        4    0.000    0.000    0.000    0.000 polyoptions.py:359(preprocess)
        4    0.000    0.000    0.000    0.000 polyoptions.py:412(preprocess)
       54    0.000    0.000    0.000    0.000 pythonintegerring.py:22(__init__)
       54    0.000    0.000    0.000    0.000 pythonintegerring.py:46(from_QQ_python)
       54    0.000    0.000    0.000    0.000 pythonintegerring.py:79(lcm)
     2703    0.007    0.000    0.018    0.000 pythonrational.py:134(__sub__)
     5350    0.011    0.000    0.030    0.000 pythonrational.py:164(__mul__)
     2816    0.006    0.000    0.015    0.000 pythonrational.py:191(__div__)
     5457    0.001    0.000    0.001    0.000 pythonrational.py:236(__nonzero__)
      122    0.000    0.000    0.000    0.000 pythonrational.py:241(__eq__)
       54    0.000    0.000    0.000    0.000 pythonrational.py:272(numer)
      108    0.000    0.000    0.000    0.000 pythonrational.py:276(denom)
       54    0.000    0.000    0.000    0.000 pythonrational.py:40(parent)
    10917    0.010    0.000    0.021    0.000 pythonrational.py:44(__init__)
        4    0.000    0.000    0.000    0.000 pythonrational.py:80(__hash__)
       54    0.000    0.000    0.000    0.000 pythonrationalfield.py:19(__init__)
        6    0.000    0.000    0.000    0.000 pythonrationalfield.py:22(get_ring)
       48    0.000    0.000    0.000    0.000 pythonrationalfield.py:42(from_ZZ_python)
       54    0.000    0.000    0.000    0.000 pythonrationalfield.py:68(denom)
       28    0.000    0.000    0.000    0.000 re.py:185(sub)
       28    0.000    0.000    0.000    0.000 re.py:271(_compile)
        3    0.000    0.000    0.000    0.000 rings.py:1047(__rsub__)
       17    0.000    0.000    0.000    0.000 rings.py:1074(__mul__)
       64    0.000    0.000    0.000    0.000 rings.py:1124(__rmul__)
       46    0.000    0.000    0.000    0.000 rings.py:1153(__pow__)
       10    0.000    0.000    0.000    0.000 rings.py:1365(_term_div)
      163    0.000    0.000    0.000    0.000 rings.py:1372(term_div)
       10    0.000    0.000    0.002    0.000 rings.py:1474(rem)
       26    0.000    0.000    0.000    0.000 rings.py:1478(<genexpr>)
    11882    0.003    0.000    0.036    0.000 rings.py:1667(leading_expv)
     2323    0.001    0.000    0.001    0.000 rings.py:1687(_get_coeff)
      120    0.000    0.000    0.001    0.000 rings.py:1731(LC)
     7658    0.002    0.000    0.025    0.000 rings.py:1735(LM)
     2203    0.001    0.000    0.009    0.000 rings.py:1764(LT)
     1794    0.001    0.000    0.007    0.000 rings.py:1772(leading_term)
        4    0.000    0.000    0.000    0.000 rings.py:187(_parse_symbols)
      629    0.000    0.000    0.001    0.000 rings.py:1889(iterterms)
        4    0.000    0.000    0.000    0.000 rings.py:193(<genexpr>)
        6    0.000    0.000    0.000    0.000 rings.py:195(<genexpr>)
      120    0.000    0.000    0.007    0.000 rings.py:1956(monic)
      565    0.001    0.000    0.021    0.000 rings.py:1963(mul_ground)
      565    0.001    0.000    0.019    0.000 rings.py:1967(<listcomp>)
     2021    0.003    0.000    0.038    0.000 rings.py:1975(mul_term)
     1456    0.002    0.000    0.013    0.000 rings.py:1984(<listcomp>)
      120    0.000    0.000    0.007    0.000 rings.py:1987(quo_ground)
       59    0.000    0.000    0.006    0.000 rings.py:1997(<listcomp>)
        4    0.000    0.000    0.003    0.001 rings.py:205(__new__)
     8288    0.002    0.000    0.009    0.000 rings.py:255(<lambda>)
     3584    0.001    0.000    0.024    0.000 rings.py:257(<lambda>)
        4    0.000    0.000    0.000    0.000 rings.py:270(_gens)
        8    0.000    0.000    0.000    0.000 rings.py:294(__hash__)
      139    0.000    0.000    0.000    0.000 rings.py:297(__eq__)
        2    0.000    0.000    0.001    0.001 rings.py:305(clone)
        8    0.000    0.000    0.000    0.000 rings.py:308(monomial_basis)
     6582    0.001    0.000    0.001    0.000 rings.py:314(zero)
      207    0.000    0.000    0.001    0.000 rings.py:322(domain_new)
        2    0.000    0.000    0.002    0.001 rings.py:33(ring)
       12    0.000    0.000    0.001    0.000 rings.py:359(from_dict)
     2338    0.001    0.000    0.001    0.000 rings.py:561(new)
        8    0.000    0.000    0.000    0.000 rings.py:572(__hash__)
      252    0.000    0.000    0.000    0.000 rings.py:583(copy)
       12    0.000    0.000    0.001    0.000 rings.py:611(set_ring)
        6    0.000    0.000    0.001    0.000 rings.py:632(clear_denoms)
        6    0.000    0.000    0.000    0.000 rings.py:646(<listcomp>)
       17    0.000    0.000    0.000    0.000 rings.py:649(strip_zero)
      127    0.000    0.000    0.000    0.000 rings.py:655(__eq__)
       45    0.000    0.000    0.000    0.000 rings.py:919(__add__)
        3    0.000    0.000    0.000    0.000 rings.py:973(__radd__)
      194    0.002    0.000    0.021    0.000 rings.py:993(__sub__)
        4    0.000    0.000    0.000    0.000 symbol.py:168(_sanitize)
        4    0.000    0.000    0.000    0.000 symbol.py:202(__new__)
        1    0.000    0.000    0.000    0.000 symbol.py:215(__new_stage2__)
        1    0.000    0.000    0.000    0.000 symbol.py:250(_hashable_content)
        1    0.000    0.000    0.000    0.000 symbol.py:259(assumptions0)
        2    0.000    0.000    0.000    0.000 symbol.py:261(<genexpr>)
        2    0.000    0.000    0.000    0.000 symbol.py:486(symbols)
        4    0.000    0.000    0.000    0.000 symbol.py:616(literal)
        2    0.000    0.000    0.000    0.000 symbol.py:630(<listcomp>)
        6    0.000    0.000    0.000    0.000 symbol.py:631(<genexpr>)
        1    0.000    0.000    0.195    0.195 test_groebnertools.py:257(_do_test_benchmark_czichowski)
        1    0.000    0.000    0.000    0.000 test_groebnertools.py:284(<listcomp>)
        1    0.000    0.000    0.195    0.195 test_groebnertools.py:331(test_benchmark_czichowski_f5b)
       28    0.000    0.000    0.001    0.000 textwrap.py:414(dedent)
        5    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x00007FFB99268D30}
       74    0.000    0.000    0.000    0.000 {built-in method builtins.abs}
    10244    0.003    0.000    0.005    0.000 {built-in method builtins.all}
       69    0.000    0.000    0.007    0.000 {built-in method builtins.any}
     29/1    0.002    0.000    0.195    0.195 {built-in method builtins.exec}
      103    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
    22538    0.012    0.000    0.012    0.000 {built-in method builtins.hasattr}
    41/33    0.000    0.000    0.000    0.000 {built-in method builtins.hash}
    34542    0.005    0.000    0.005    0.000 {built-in method builtins.isinstance}
      631    0.000    0.000    0.000    0.000 {built-in method builtins.iter}
      432    0.000    0.000    0.000    0.000 {built-in method builtins.len}
    13666    0.019    0.000    0.031    0.000 {built-in method builtins.max}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.next}
        8    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}
        3    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
    51820    0.005    0.000    0.005    0.000 {built-in method builtins.sum}
    21028    0.010    0.000    0.010    0.000 {built-in method math.gcd}
     1509    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        2    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        2    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}
       28    0.000    0.000    0.000    0.000 {method 'findall' of 're.Pattern' objects}
     5121    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}
        5    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
     2504    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
       84    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
       19    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        4    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}
      369    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
       59    0.002    0.000    0.014    0.000 {method 'sort' of 'list' objects}
        6    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
       84    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
        6    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
       56    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 {method 'update' of 'set' objects}
        4    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        6    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}